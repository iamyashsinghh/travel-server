generator client {
  provider = "prisma-client-js"
  seed     = "node prisma/seed.js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model admin {
  id         Int      @id @default(autoincrement())
  email      String   @unique(map: "Admin_email_key")
  password   String
  name       String
  role       String   @default("admin")
  created_at DateTime @default(now()) @db.Timestamp(0)
  updated_at DateTime @default(now()) @db.Timestamp(0)

  permissions permission[] // Add this relation
}

model permission {
  id      Int    @id @default(autoincrement())
  name    String
  adminId Int    @map("adminId")

  admin admin @relation(fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId], map: "Permission_adminId_fkey")
}

model otps {
  id         Int      @id @default(autoincrement()) @db.UnsignedInt
  user_id    String   @db.VarChar(255)
  code       String   @db.VarChar(10)
  expires_at DateTime @db.DateTime(0)
  created_at DateTime @default(now()) @db.Timestamp(0)
  type       otp_type @default(user)
}

model users {
  id               Int             @id @default(autoincrement()) @db.UnsignedInt
  name             String?
  username         String?         @unique(map: "users_username_unique") @db.VarChar(25)
  map_type         String?
  email            String?         @unique(map: "users_email_unique") @db.VarChar(150)
  mobile           String          @unique(map: "users_mobile_unique") @db.VarChar(14)
  ride_otp         Int?
  gender           String?
  profile_picture  String?
  active           Boolean         @default(true)
  email_confirmed  Boolean         @default(false)
  mobile_confirmed Boolean         @default(false)
  fcm_token        String?
  expo_token       String?
  refferal_code    String?
  referred_by      Int?            @db.UnsignedInt
  current_lat      Float?
  current_lng      Float?
  rating_total     Float           @default(0)
  no_of_ratings    Int             @default(0)
  login_by         users_login_by?
  last_known_ip    String?         @db.VarChar(45)
  last_login_at    DateTime?       @db.Timestamp(0)
  created_at       DateTime        @default(now()) @db.Timestamp(0)
  updated_at       DateTime        @default(now()) @db.Timestamp(0)
  deleted_at       DateTime?       @db.Timestamp(0)

  rides rides[] @relation(name: "UserRides")
}

model drivers {
  id               Int               @id @default(autoincrement())
  name             String            @db.VarChar(255)
  mobile           String            @db.VarChar(191) @unique
  current_address  String?           @db.Text
  address          String?           @db.Text
  email            String            @db.VarChar(255)
  alt_mobile       String?           @db.VarChar(255)
  gender           drivers_gender?
  age              Int?
  profile_image    String?           @db.VarChar(255)
  active           drivers_active?
  fcm_token        String?           @db.VarChar(255)
  expo_token       String?           @db.VarChar(255)
  dob              String?           @db.VarChar(255)
  total_rating     Float             @default(0)
  number_of_rating Float             @default(0)
  current_lat      Float?
  current_long     Float?
  login_by         drivers_login_by?
  last_log_ip      String?           @db.VarChar(255)
  last_login_at    DateTime?         @db.DateTime(0)
  created_at       DateTime?         @default(now()) @db.DateTime(0)
  deleted_at       DateTime?         @db.DateTime(0)
  updated_at       DateTime?         @default(now()) @db.DateTime(0)
  account_status           String?           @db.VarChar(191)
  status           String?           @db.VarChar(255)
  created_by       Int
  vehicles         Vehicle[]
  rides            rides[]           @relation(name: "RideDriver")
  assigned_rides   rides[]           @relation(name: "AssignedRideDriver")
}

model Vehicle_type {
  id     Int            @id @default(autoincrement())
  name   String         @unique
  no_of_person Int      @default(4)
  icon   String? // URL or file path for the icon image
  status vehicle_status @default(start_riding)
  rules  Json

  vehicles Vehicle[]
}

model Vehicle {
  id              Int      @id @default(autoincrement())
  driver_id       Int
  vehicle_type_id Int
  name            String // Vehicle name or model
  image           String? // Vehicle image (URL or file path)
  license_plate   String? // Registration number
  details         String? // Additional information (color, model year, etc.)
  created_at      DateTime @default(now())
  updated_at      DateTime @default(now())

  driver       drivers      @relation(fields: [driver_id], references: [id])
  vehicle_type Vehicle_type @relation(fields: [vehicle_type_id], references: [id])
}

model rides {
  id                 Int         @id @default(autoincrement())
  user_id            Int
  driver_id          Int?        @map("driverId") // Nullable for unassigned rides
  assigned_driver_id Int? // Pre-assigned driver for scheduled rides
  pickup_lat         Float
  pickup_lng         Float
  drop_lat           Float
  drop_lng           Float
  fare               Float       @default(0)
  payment_mode              String?           @db.VarChar(255)
  distance           Float       @default(0) // Distance in Meter
  duration           Int         @default(0) // Duration in minutes
  status             ride_status @default(pending)
  ride_type          ride_type   @default(standard)
  scheduled_at       DateTime? // Time for scheduled ride
  is_scheduled       Boolean     @default(false)
  created_at         DateTime    @default(now())
  updated_at         DateTime    @default(now())

  user            users    @relation(fields: [user_id], references: [id], name: "UserRides")
  driver          drivers? @relation(name: "RideDriver", fields: [driver_id], references: [id])
  assigned_driver drivers? @relation(name: "AssignedRideDriver", fields: [assigned_driver_id], references: [id])
}

model zones {
  id      Int    @id @default(autoincrement())
  name    String @unique
  polygon Json // GeoJSON format to store polygon boundaries
}

enum users_login_by {
  android
  ios
}

enum otp_type {
  user
  driver
}

enum drivers_gender {
  male
  female
  others
}

enum drivers_active {
  online
  offline
}

enum drivers_login_by {
  ios
  android
}

enum vehicle_status {
  start_riding
  coming_soon
  off
}

enum ride_status {
  pending
  accepted
  ongoing
  completed
  canceled
}

enum ride_type {
  standard
  premium
}